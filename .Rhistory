![](pixrel.pdf)
![testing images](pixrel.pdf)
knitr::include_graphics("Relationship.jpeg")
knitr::include_graphics("Relationship.jpeg")
ls
#Create ATB database ####
antibiotic_db <- dbConnect(drv = RSQLite::SQLite(),
"../../databases_WLF/ATB.db")
#Create ATB database ####
antibiotic_db <- dbConnect(drv = RSQLite::SQLite(),
"../databases_WLF/ATB.db")
pwd
ls
cd ..
#Create ATB database ####
antibiotic_db <- dbConnect(drv = RSQLite::SQLite(),
"../databases_WLF/ATB.db")
#Create ATB database ####
antibiotic_db <- dbConnect(drv = RSQLite::SQLite(),
"C:\Users\Jacob\Documents\Projects_R\553_WLF02\databases_WLF\ATB.db")
#Create ATB database ####
antibiotic_db <- dbConnect(drv = RSQLite::SQLite(),
"C:/Users/Jacob/Documents/Projects_R/553_WLF02/databases_WLF/ATB.db")
#Create ATB database ####
library(DBI)
library(RSQLite)
antibiotic_db <- dbConnect(drv = RSQLite::SQLite(),                           "C:/Users/Jacob/Documents/Projects_R/553_WLF02/databases_WLF/ATB.db")
#Create the tables that will populate the ATB database
#Create Antibiotic_Table containing antibiotics and class ####
dbExecute(antibiotic_db,
"CREATE TABLE Antibiotic_Table(
antibioticType varchar(20) NOT NULL PRIMARY KEY,
antibioticClass varchar(20));")
library(tidyverse)
costR <-  read.csv("C:\Users\Jacob\Documents\Projects_R\553_WLF02\Raw_data\costR.csv")
costR <-read.csv("C:\Users\Jacob\Documents\Projects_R\553_WLF02\Raw_data\costR.csv")
costR <- read.csv("C:\Users\Jacob\Documents\Projects_R\553_WLF02\Raw_data\costR.csv")
file_path <-"C:\Users\Jacob\Documents\Projects_R\553_WLF02\Raw_data\costR.csv"
file_path <-"C:/Users/Jacob/Documents/Projects_R/553_WLF02/Raw_data/costR.csv"
costR <-  read.csv(file_path)
library(tidyverse)
glimpse(costR)
p <- costR %>%
select(fitness) %>%
ggplot(mapping = aes(x = fitness))+
geom_histogram(binwidth = 0.01)+
labs(title = "Range of Fitness Values")+
theme()
library(tidyverse)
p <- costR %>%
select(fitness) %>%
ggplot(mapping = aes(x = fitness))+
geom_histogram(binwidth = 0.01)+
labs(title = "Range of Fitness Values")+
theme()
library(tidyverse)
p <- costR %>%
select(fitness) %>%
ggplot(mapping = aes(x = fitness))+
geom_histogram(binwidth = 0.01)+
labs(title = "Range of Fitness Values")+
theme()
library(tidyverse)
library(DBI)
library(RSQLite)
library(viridis)
library(GGally)
library(lattice)
library(gt)
#knitr::opts_chunk$set(echo = TRUE)
file_path <-"C:/Users/Jacob/Documents/Projects_R/553_WLF02/Raw_data/costR.csv"
costR <-  read.csv(file_path)
knitr::include_graphics("Relationship.jpeg")
#Create ATB database ####
library(DBI)
library(RSQLite)
library(tidyverse)
antibiotic_db <- dbConnect(drv = RSQLite::SQLite(),                           "C:/Users/Jacob/Documents/Projects_R/553_WLF02/databases_WLF/ATB.db")
#Create the tables that will populate the ATB database
#Create Antibiotic_Table containing antibiotics and class ####
dbExecute(antibiotic_db,
"CREATE TABLE Antibiotic_Table(
antibioticType varchar(20) NOT NULL PRIMARY KEY,
antibioticClass varchar(20));")
#Create ATB database ####
library(DBI)
library(RSQLite)
library(tidyverse)
antibiotic_db <- dbConnect(drv = RSQLite::SQLite(),                           "C:/Users/Jacob/Documents/Projects_R/553_WLF02/databases_WLF/ATB.db")
#Create the tables that will populate the ATB database
#Create Antibiotic_Table containing antibiotics and class ####
dbExecute(antibiotic_db,
"CREATE TABLE Antibiotic_Table(
antibioticType varchar(20) NOT NULL PRIMARY KEY,
antibioticClass varchar(20));")
#create Laboratory standard table
dbExecute(antibiotic_db,
"CREATE TABLE Laboratory_standard(
strain_reference varchar(25),
technique varchar(20),
medium varchar(20),
serial_num real,
FOREIGN KEY (serial_num) REFERENCES Bacteria (serial_num));")
# Extract and select the data from the spreadsheet that will be entered into each table.
```{r}
distinctBac <- costR %>%
select(bacteria, gram_stain, gene_target, gene_mutation) %>%
distinct()
FIT <-  costR %>%
select(MIC, Selection_coefficient,
fitness, SE, gene_mutation, antibioticType) %>%
distinct()
REF <-  costR %>%
select(strain_reference, technique, medium) %>%
distinct()
REF <-  costR %>%
select(strain_reference, technique, medium) %>%
distinct()
file_path <-"C:/Users/Jacob/Documents/Projects_R/553_WLF02/Raw_data/costR.csv"
costR <-  read.csv(file_path)
library(tidyverse)
library(DBI)
library(RSQLite)
library(viridis)
library(GGally)
library(lattice)
library(gt)
knitr::opts_chunk$set(echo = TRUE)
file_path <-"C:/Users/Jacob/Documents/Projects_R/553_WLF02/Raw_data/costR.csv"
costR <-  read.csv(file_path)
knitr::include_graphics("Relationship.jpeg")
#Create ATB database ####
library(DBI)
library(RSQLite)
library(tidyverse)
antibiotic_db <- dbConnect(drv = RSQLite::SQLite(),                           "C:/Users/Jacob/Documents/Projects_R/553_WLF02/databases_WLF/ATB.db")
#Create the tables that will populate the ATB database
#Create Antibiotic_Table containing antibiotics and class ####
dbExecute(antibiotic_db,
"CREATE TABLE Antibiotic_Table(
antibioticType varchar(20) NOT NULL PRIMARY KEY,
antibioticClass varchar(20));")
atbdf <-  costR %>%
select(antibioticType, antibioticClass) %>%
distinct()
distinctBac <- costR %>%
select(bacteria, gram_stain, gene_target, gene_mutation) %>%
distinct()
FIT <-  costR %>%
select(MIC, Selection_coefficient,
fitness, SE, gene_mutation, antibioticType) %>%
distinct()
REF <-  costR %>%
select(strain_reference, technique, medium) %>%
distinct()
dbWriteTable(antibiotic_db, "Antibiotic_Table", atbdf, overwrite = TRUE)
dbWriteTable(antibiotic_db, "Bacteria", distinctBac, overwrite = TRUE)
dbWriteTable(antibiotic_db, "microbial_fitness", FIT, overwrite = TRUE)
dbWriteTable(antibiotic_db, "Laboratory_standard", REF, overwrite = TRUE)
dbListFields(antibiotic_db, "Antibiotic_Table")
dbListFields(antibiotic_db, "Bacteria")
dbReadTable(antibiotic_db, "microbial_fitness")
dbReadTable(antibiotic_db, "Bacteria")
library(tidyverse)
p <- costR %>%
select(fitness) %>%
ggplot(mapping = aes(x = fitness))+
geom_histogram(binwidth = 0.01)+
labs(title = "Range of Fitness Values")+
theme()
p1 <- ggplot(data = costR, mapping = aes(x = SE))+
geom_histogram(binwidth = 0.01)+
labs(title= "Range of SE values")+
theme_classic()
p2 <- ggplot(data = costR, mapping = aes(x = Selection_coefficient))+
geom_histogram(binwidth = 0.01)+
labs(title="Range of Selection coefficient values",
x = "Selection Coefficient")+
theme_bw()
p3 <- costR %>%
select(MIC) %>%
ggplot(mapping = aes(x = MIC))+
geom_histogram(bins = 15)+
labs(title = "Range of Minimum Inhibitory Concentration values")+
scale_fill_viridis_d(option = "magma")
p
p1
p2
p3
p4 <- ggplot(data = costR, mapping = aes(x = fitness, y = Selection_coefficient, color = SE))+
geom_point()+labs(title = "Scatter Plot with color encoding",
x="Fitness",
y = "Selection Coefficient",
color = "SE")
p4
p5 <- ggplot(data = costR, mapping = aes(x = fitness, y = Selection_coefficient, size = SE))+
geom_point()+
labs(title = "Scatter plot with size encoding",
x = "Fitness",
y = "Selection Coefficient",
size = "SE")
p5
numericonly <- costR %>%
select(fitness, Selection_coefficient, SE)
#Use the data
g <- ggpairs(numericonly, title = 'Pair Plot')
g
splom(numericonly,
main = "Scatterplot Matrix")
library(tidyverse)
costR %>%
mutate(GroupFIT = case_when(fitness > 1.35 ~ "Most Fit of All",
between(fitness, 1.25, 1.35)~ "Highly Fit",
between(fitness, 1.0, 1.25)~ "Fit",
between(fitness, .75, 1.0) ~ "Less Fit",
between(fitness, .35, .75)~ "Much Less Fit",
fitness<.35 ~ "Least Fit of All",
TRUE ~ "Unknown")) %>%
select(GroupFIT, bacteria) %>%
group_by(GroupFIT) %>%
tally() %>%
mutate(pct = round(100 *(n/sum(n)), digits =3)) %>%
arrange(factor(GroupFIT, levels = c("Most Fit of All", "Highly Fit",
"Fit", "Less Fit",
"Much Less Fit"),
"Least Fit of All")) %>%
gt() %>%
tab_header(title = "Fitness Groups") %>%
cols_label(GroupFIT = "Group",
n = "Number of organisms",
pct = "Percentage"
)
GramFIT <- costR %>%
filter(gram_stain == "negative" | gram_stain == "positive") %>%
group_by(gram_stain) %>%
summarise(mean_fitness = mean(fitness),
IQR = IQR(fitness),
Minumum = min(fitness),
Maximum = max(fitness),
Standard_deviation = sd(fitness))
GramFIT %>%
gt() %>%
tab_header(title = "Differences in fitness based on gram stain") %>%
cols_label(gram_stain = "Gram stain",
mean_fitness = "Mean Fitness",
IQR = "Interquantile Range",
Minumum="Minimum",
Maximum= "Maximum",
Standard_deviation= "Standard Deviation")
GramFIT
costR %>%
ggplot(mapping = aes(x=gram_stain, y=fitness))+
geom_boxplot()
costR %>%
select(antibioticClass, fitness) %>%
group_by(antibioticClass) %>%
summarise(mean_cost = mean(fitness),
stddev = sd(fitness, na.rm = TRUE),
meansd_l = mean_cost - stddev,
meansd_u = mean_cost + stddev) %>%
ggplot(mapping = aes(x= mean_cost, y = antibioticClass))+
geom_point()+
geom_vline(xintercept = 1)+
geom_errorbar(mapping = aes(xmin = meansd_l, xmax = meansd_u))+
labs(x = "Mean Fitness Cost", y = "Antibiotic Class")+
ggtitle("Fitness Cost each Antibiotic Class")
costR %>%
select(antibioticType, fitness) %>%
group_by(antibioticType) %>%
summarise(mean_cost = mean(fitness),
stddev = sd(fitness, na.rm = TRUE),
meansd_l = mean_cost - stddev,
meansd_u = mean_cost + stddev) %>%
ggplot(mapping = aes(x= mean_cost, y = antibioticType))+
geom_point()+
geom_vline(xintercept = 1)+
geom_errorbar(mapping = aes(xmin = meansd_l, xmax = meansd_u))+
labs(x = "Mean Fitness Cost", y = "Antibiotic")+
ggtitle("Fitness Cost each Antibiotic")
costR %>%
select(bacteria, fitness) %>%
group_by(bacteria) %>%
summarise(mean_cost = mean(fitness),
stddev = sd(fitness, na.rm = TRUE),
meansd_l = mean_cost - stddev,
meansd_u = mean_cost + stddev) %>%
ggplot(mapping = aes(x = mean_cost, y =bacteria))+
geom_point()+
geom_vline(xintercept = 1)+
geom_errorbar(mapping = aes(xmin = meansd_l, xmax = meansd_u))+
labs(x = "Mean Fitness Cost", y = "Bacteria")+
ggtitle("Fitness Cost per Bacterial Species")
summary_data <- costR %>%
drop_na() %>%
group_by(bacteria, antibioticType, fitness) %>%
summarize(MeanFITNESS = mean(fitness))
ggplot(summary_data, aes(x = antibioticType, y = bacteria, fill = fitness)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "Heat Map of Values by Antibiotic and Bacteria",
x = "Antibiotic",
y = "Bacteria",
fill = "fitness")
NumBacterialessFIT <- costR %>%
select(bacteria, gene_mutation, fitness) %>%
filter(bacteria == "S. aureus" & fitness < 1.0) %>%
distinct(gene_mutation) %>%
tally()
NumBacterialessFIT
NumBacteriamoreFit <- costR %>%
select(bacteria, gene_mutation, fitness) %>%
filter(bacteria == "S. aureus" & fitness > 1.0) %>%
distinct(gene_mutation) %>%
tally()
NumBacteriamoreFit
BacterialessFIT <- costR %>%
select(bacteria, gene_mutation, fitness) %>%
filter(bacteria == "S. aureus" & fitness < 1.0) %>%
distinct(gene_mutation) %>%
rename("Gene Mutation" = gene_mutation)
BacterialessFIT
BacteriaMoreFit <- costR %>%
select(bacteria, gene_mutation, fitness) %>%
filter(bacteria == "S. aureus" & fitness > 1.0) %>%
distinct(gene_mutation) %>%
rename("Gene Mutation" = gene_mutation)
BacteriaMoreFit
